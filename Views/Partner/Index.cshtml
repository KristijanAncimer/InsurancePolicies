@using InsurancePolicies.Application.Handlers.Partners.Helpers.Enums
@using InsurancePolicies.Application.Handlers.Partners.Queries.GetAll
@model IEnumerable<GetAllPartnersDto>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Partners</title>
    <!-- Include Bootstrap 4 CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .highlighted {
            background-color: darkred !important;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>All Partners</h1>
            <button id="addNewPartnerBtn" class="btn btn-primary">Add New Partner</button>
        </div>
        <h1 class="text-center mb-4">All Partners</h1>

        @if (Model != null && Model.Any())
        {
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>ID</th>
                        <th>Full Name</th>
                        <th>Partner Number</th>
                        <th>Croatian PIN</th>
                        <th>Partner Type</th>
                        <th>Created At (UTC)</th>
                        <th>Is Foreign</th>
                        <th>Gender</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var partner in Model)
                    {
                        <tr class="partner-row" data-id="@partner.Id">
                            <td>@partner.Id</td>
                            <td>@partner.FullName</td>
                            <td>@partner.PartnerNumber</td>
                            <td>@($"{partner.CroatianPIN ?? "N/A"}")</td>
                            <td>@($"{partner.PartnerTypeId switch { PartnerTypeId.Personal => "Personal", PartnerTypeId.Legal => "Legal", _ => "Unknown" }}")</td>
                            <td>@partner.CreatedAtUtc.ToString("yyyy-MM-dd HH:mm:ss")</td>
                            <td>@(partner.IsForeign ? "Yes" : "No")</td>
                            <td>@($"{partner.Gender switch { Gender.M => "Male", Gender.F => "Female", Gender.N => "Non-Binary", _ => "Unknown" }}")</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-center">No partners found.</p>
        }
    </div>

    <!-- Modal -->
    <div class="modal fade" id="partnerDetailsModal" tabindex="-1" role="dialog" aria-labelledby="partnerDetailsLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="partnerDetailsLabel">Partner Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div id="partnerDetailsContent"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="addPolicyButton">Add Policy</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Policy Modal -->
    <div class="modal fade" id="addPolicyModal" tabindex="-1" role="dialog" aria-labelledby="addPolicyModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addPolicyModalLabel">Add New Policy</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addPolicyForm">
                        <div class="form-group">
                            <label for="policyNumber">Policy Number</label>
                            <input type="text" class="form-control" id="policyNumber" name="policyNumber" required>
                        </div>
                        <div class="form-group">
                            <label for="policyAmount">Policy Amount</label>
                            <input type="number" class="form-control" id="policyAmount" name="policyAmount" required>
                        </div>
                        <input type="hidden" id="policyPartnerId" name="partnerId">
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="savePolicyButton">Save Policy</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for adding a new partner -->
    <div class="modal fade" id="addPartnerModal" tabindex="-1" role="dialog" aria-labelledby="addPartnerModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addPartnerModalLabel">Add New Partner</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="addPartnerForm">
                        <div class="form-group">
                            <label for="firstName">First Name</label>
                            <input type="text" class="form-control" id="partnerFirstName" name="firstName" required>
                        </div>
                        <div class="form-group">
                            <label for="lastName">Last Name</label>
                            <input type="text" class="form-control" id="partnerLastName" name="lastName" required>
                        </div>
                        <div class="form-group">
                            <label for="address">Address</label>
                            <input type="text" class="form-control" id="partnerAddress" name="address" required>
                        </div>
                        <div class="form-group">
                            <label for="partnerPartnerNumber">Partner Number</label>
                            <input type="text" class="form-control" id="partnerPartnerNumber" name="partnerNumber" required>
                        </div>
                        <div class="form-group">
                            <label for="partnerCroatianPIN">Croatian PIN</label>
                            <input type="text" class="form-control" id="partnerCroatianPIN" name="croatianPIN">
                        </div>
                        <div class="form-group">
                            <label for="partnerPartnerType">Partner Type</label>
                            <select class="form-control" id="partnerPartnerType" name="partnerTypeId">
                                @foreach (var value in Enum.GetValues(typeof(PartnerTypeId)).Cast<PartnerTypeId>())
                                {
                                    <option value="@(value)">@value</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="partnerExternalCode">External Code</label>
                            <input type="text" class="form-control" id="partnerExternalCode" name="externalCode">
                        </div>
                        <div class="form-group">
                            <label for="partnerCreatedByUser">Created By User</label>
                            <input type="text" class="form-control" id="partnerCreatedByUser" name="createdByUser">
                        </div>
                        <div class="form-group">
                            <label for="partnerGender">Gender</label>
                            <select class="form-control" id="partnerGender" name="gender">
                                @foreach (var value in Enum.GetValues(typeof(Gender)).Cast<Gender>())
                                {
                                    <option value="@(value)">@value</option>
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="partnerIsForeign">Is Foreign?</label>
                            <input type="checkbox" id="partnerIsForeign" name="isForeign">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="savePartnerButton">Save Partner</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Include Bootstrap 4 JavaScript -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Open modal when "Add New Partner" button is clicked
            $('#addNewPartnerBtn').on('click', function () {
                $('#addPartnerModal').modal('show');
            });

            // Handle saving the new partner
            $('#savePartnerButton').on('click', function () {
                const firstName = $('#partnerFirstName').val();
                const lastName = $('#partnerLastName').val();
                const address = $('#partnerAddress').val();
                const partnerNumber = $('#partnerPartnerNumber').val();
                const croatianPIN = $('#partnerCroatianPIN').val();
                const partnerTypeId = $('#partnerPartnerType').val();
                const externalCode = $('#partnerExternalCode').val();
                const createdByUser = $('#partnerCreatedByUser').val();
                const gender = $('#partnerGender').val();
                const isForeign = $('#partnerIsForeign').is(':checked') ? 1 : 0;

                // Validation
                if (!firstName || !lastName || !address || !partnerNumber || !partnerTypeId || !gender) {
                    alert('Please fill all required fields.');
                    return;
                }
                if (!firstName || firstName.length < 2) { alert('First Name must be at least 2 characters long.'); return; }
                if (!lastName || lastName.length < 2) { alert('Last Name must be at least 2 characters long.'); return; }
                if (!partnerNumber || partnerNumber.length !== 20 || /[^0-9]/.test(partnerNumber)) {
                    alert('Partner Number must be exactly 20 numeric characters.');
                    return;
                }
                if (croatianPIN && croatianPIN.length !== 11) { alert('Croatian PIN must be 11 characters long or left empty.'); return; }
                if (!externalCode || externalCode.length < 10 || externalCode.length > 20) { alert('External Code must be between 10 and 20 characters long.'); return; }

                // AJAX call for saving the partner
                $.ajax({
                    url: '/Partner/AddPartner',
                    method: 'POST',
                    data: {
                        firstName,
                        lastName,
                        address,
                        partnerNumber,
                        croatianPIN,
                        partnerTypeId,
                        createdByUser,
                        isForeign,
                        externalCode,
                        gender
                    },
                    success: function (response) {
                        const newPartner = `
                            <tr class="partner-row highlighted" data-id="${response.id}">
                                <td>${response.firstName}</td>
                                <td>${response.lastName}</td>
                                <td>${response.address}</td>
                                <td>${response.partnerNumber}</td>
                                <td>${response.croatianPIN}</td>
                                <td>${response.partnerTypeId}</td>
                                <td>${response.externalCode}</td>
                                <td>${response.gender}</td>
                                <td>${response.isForeign ? 'Yes' : 'No'}</td>
                            </tr>
                            `;
                        $('#partnerListTable tbody').append(newPartner);

                        // Save ID and reload
                        localStorage.setItem('lastAddedPartnerId', response.id);
                        location.reload();
                    },
                    error: function (error) {
                        console.error(error);
                        alert('Failed to add partner.');
                    }
                });
            });

            // Highlight last added partner after reload
            const lastAddedPartnerId = localStorage.getItem('lastAddedPartnerId');
            if (lastAddedPartnerId) {
                const row = $(`tr.partner-row[data-id='${lastAddedPartnerId}']`);
                if (row.length) {
                    row.addClass('highlighted');
                    setTimeout(() => {
                        row.removeClass('highlighted');
                    }, 7500);
                    localStorage.removeItem('lastAddedPartnerId');
                }
            }
        });
    </script>


    <script>
        $(document).ready(function () {
            let currentPartnerId;

            $('.partner-row').on('click', function () {
                const partnerId = $(this).data('id');
                currentPartnerId = partnerId;
                console.log("Selected Partner ID:", partnerId);

                if (!partnerId || partnerId <= 0) {
                    alert('Invalid Partner ID');
                    return;
                }

                // Fetch partner details via AJAX
                $.ajax({
                    url: '/Partner/GetPartnerDetails',
                    method: 'GET',
                    data: { id: partnerId },
                    success: function (data) {
                        const partnerTypeFriendlyName = data.partnerTypeId === 1 ? "Personal" : "Legal";
                        const genderFriendlyName = data.gender === 1
                            ? "Male"
                            : data.gender === 2
                                ? "Female"
                                : "Non-Binary";

                        const content = `
                                    <p><strong>Full Name:</strong> ${data.fullName}</p>
                                    <p><strong>Address:</strong> ${data.address}</p>
                                    <p><strong>Partner Number:</strong> ${data.partnerNumber}</p>
                                    <p><strong>Croatian PIN:</strong> ${data.croatianPIN ?? 'N/A'}</p>
                                    <p><strong>Partner Type:</strong> ${partnerTypeFriendlyName}</p>
                                    <p><strong>Created At (UTC):</strong> ${data.createdAtUtc}</p>
                                    <p><strong>Created By:</strong> ${data.createdByUser}</p>
                                    <p><strong>Is Foreign:</strong> ${data.isForeign ? 'Yes' : 'No'}</p>
                                    <p><strong>External Code:</strong> ${data.externalCode}</p>
                                    <p><strong>Gender:</strong> ${genderFriendlyName}</p>
                                `;
                        $('#partnerDetailsContent').html(content);
                        $('#partnerDetailsModal').data('partner-id', partnerId).modal('show');
                    },
                    error: function (error) {
                        console.log(error);
                        alert('Failed to fetch partner details.');
                    }
                });
                $('#partnerDetailsModal').on('click', '.btn-secondary', function () {
                    $('#partnerDetailsModal').modal('hide');
                });
            });

            // Open add policy modal
            $('#addPolicyButton').on('click', function () {
                if (!currentPartnerId) {
                    alert('No partner selected.');
                    return;
                }
                $('#policyPartnerId').val(currentPartnerId);
                $('#addPolicyModal').modal('show');
            });

            // Save policy
            $('#savePolicyButton').on('click', function () {
                const policyNumber = $('#policyNumber').val();
                const policyAmount = $('#policyAmount').val();
                const partnerId = $('#policyPartnerId').val();

                if (!policyNumber || !policyAmount || !partnerId) {
                    alert('All fields are required.');
                    return;
                }

                $.ajax({
                    url: `/Policy/AddPolicy?partnerId=${partnerId}`,
                    method: 'POST',
                    data: {
                        policyNumber,
                        policyAmount
                    },
                    success: function (response) {
                        alert('Policy added successfully!');
                        $('#addPolicyModal').modal('hide');
                        $('#addPolicyForm')[0].reset();
                        location.reload();
                    },
                    error: function (error) {
                        console.error(error);
                        alert('Failed to add policy.');
                    }
                });
            });
            $('#addPolicyModal').on('click', '.btn-secondary', function () {
                $('#addPolicyModal').modal('hide');
            });
        });
    </script>
</body>
</html>